I"q!<h1 id="一台电脑管理两个-github-帐号">一台电脑管理两个 GitHub 帐号</h1>

<p>出于各种原因，有些人会有多个 GitHub 账号，比如一个个人账号，一个工作账号。而 GitHub 是不允许两个账号出现相同的 SSH key 的。</p>

<p>以前我们为了方便，往往都是用 ssh-keygen 命令，默认在 ~/.ssh 目录下生成一对名为 id_rsa 和 id_rsa.pub 的密钥，然后把 id_rsa.pub 复制到 GitHub 的 SSH and GPG keys 设置中去。</p>

<p>那么问题来了，如何生成一个新的密钥给另一个账号，并且在使用的过程中尽量减少麻烦呢？</p>

<h1 id="思路">思路</h1>

<p>用 SSH 方式链接到 GitHub，需要唯一的公钥，如果想同一台电脑绑定两个 GitHub 帐号，需要两个条件：</p>

<ul>
  <li>电脑生成两对私钥/公钥</li>
  <li>push 时，可以区分两个账户，推送到相应的仓库</li>
</ul>

<p>解决方法：</p>

<ul>
  <li>生成私钥/公钥时，密钥文件命名避免重复</li>
  <li>设置不同的 Host 对应同一个 HostName，但密钥不同</li>
  <li>取消 Git 全局用户名/邮箱设置，为每个仓库单独设置 用户名/邮箱</li>
</ul>

<h1 id="操作">操作</h1>

<h2 id="1查看自己是否已经创建了-ssh-key">1、查看自己是否已经创建了 SSH key</h2>

<p>windows 下打开 Git bash，进入 .ssh 目录：</p>

<pre><code>ls ~/.ssh
</code></pre>

<p>如果看到 id_rsa 与 id_rsa.pub 则说明已经有一对密钥，那么你可以跳过步骤 2，直接进入步骤 3。</p>

<p>如果没有，则需要继续步骤 2，去生成一对密钥。</p>

<h2 id="2生成密钥">2、生成密钥</h2>

<pre><code>ssh-keygen -t rsa -f ~/.ssh/id_rsa -C "artjay.code@gmail.com"
</code></pre>

<p>解释几个参数：</p>

<ul>
  <li>-t  指定密钥类型，默认是 rsa ，可以省略</li>
  <li>-f  指定密钥文件存储文件名（注：~/.ssh/是密钥目录；id_rsa是密钥名，密钥名可以随意）</li>
  <li>-C 设置注释文字，比如邮箱（1、这里的 C 是大写的     2、一定要关联你自己的 GitHub 的注册邮箱）</li>
</ul>

<p>接着它会提示你输入两次密码（该密码是你 push 文件的时候要输入的密码，而不是 GitHub 管理者的密码），你也可以不输入密码（推荐），直接按回车。那么push的时候就不需要输入密码，可以直接提交到 GitHub 上：</p>

<pre><code>Enter passphrase (empty for no passphrase): 
Enter same passphrase again:
</code></pre>

<p>如果一切顺利的话，再次进入 .ssh 目录，你会看到里面有 id_rsa 和 id_rsa.pub 两个文件，这两个就是 SSH Key 的密钥对，id_rsa 是私钥，不能泄露出去，id_rsa.pub 是公钥，可以放心地告诉任何人。</p>

<p>之后会显示如下提示，表示 SSH key 已经创建成功：</p>

<pre><code>Your identification has been saved in /c/Users/BLUE/.ssh/id_rsa.
Your public key has been saved in /c/Users/BLUE/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:rxneWu2eUcd6M5DKFt2J9aeDZhxpNczajN89HRoqZZg artjay.code@gmail.com
The key's randomart image is:
+---[RSA 2048]----+
| . .o+.oo        |
|. oo. ..ooo o    |
|o+o.+o .oo.+ =   |
|=+ .o.Eo... = .  |
|+    .  S. o .   |
| .    o . o      |
|       B *       |
|      o X *      |
|      .o B..     |
+----[SHA256]-----+
</code></pre>

<h2 id="3生成新的密钥">3、生成新的密钥</h2>

<p>步骤 2 中你已经有了一对密钥，现在我们再生成一对新的密钥，并命名为 id_rsa_2：</p>

<pre><code>ssh-keygen -t rsa -f ~/.ssh/id_rsa_2 -C "artjay.photo@gmail.com"
</code></pre>

<p><strong>注意：</strong>这里我们只需修改两个地方就行：</p>

<p>①新的密钥名为id_rsa_2</p>

<p>②邮箱账号更换为artjay.photo@gmail.com（你的另一个 GitHub 账号的注册邮箱）</p>

<p>之后可以看到新的 SSH key 已经创建成功：</p>

<pre><code>Your identification has been saved in /c/Users/BLUE/.ssh/id_rsa_2.
Your public key has been saved in /c/Users/BLUE/.ssh/id_rsa_2.pub.
The key fingerprint is:
SHA256:rxneWu2eUcd6M5DKFt2J9aeDZhxpNczajN89HRoqZZg artjay.photo@gmail.com
The key's randomart image is:
+---[RSA 4096]----+
|                 |
|             o   |
|              =. |
|          o .B=oo|
|        SE +**++=|
|         .+++=+==|
|        ..o=B.=+=|
|       . *o+ o o+|
|        =...+    |
+----[SHA256]-----+
</code></pre>

<h2 id="4更改本地的-ssh-配置">4、更改本地的 SSH 配置</h2>

<p>在 .ssh 文件夹下新建 config 文件并编辑，另不同的 Host 实际映射到同一个 HostName，但密钥不同，Host 前缀可自定义：</p>

<pre><code>cd ~/.ssh
vim config
</code></pre>

<p>上面的命令是在 .ssh 配置目录（如果不存在）创建一个 config 文件，并用 vim 打开编辑，并通过 vim 编辑加入如下配置：</p>

<pre><code># 第一个ssh密钥（默认）                                                                      
Host github.com
HostName github.com
User git
IdentityFile ~/.ssh/id_rsa


# 第二个ssh密钥                                                                           
Host photo.github.com
HostName github.com
User git
IdentityFile ~/.ssh/id_rsa_2
</code></pre>

<h2 id="5将两个密钥对中的-id_rsapubid_rsa_2pub-的内容分别加到两个github账号配置下">5、将两个密钥对中的 id_rsa.pub，id_rsa_2.pub 的内容分别加到两个GitHub账号配置下</h2>

<p>在本机设置 SSH Key 之后，需要添加到 GitHub上，以完成 SSH 链接的设置。</p>

<ul>
  <li>打开本地 id_rsa.pub 文件（ 参考地址 C:\Users\BLUE\ .ssh \id_rsa.pub ）。此文件里面内容为刚才生成的密钥。如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。</li>
  <li>登陆 GitHub 。点击右上角的 Settings —&gt; SSH and GPG keys —&gt; New SSH key</li>
  <li>把你本地生成的密钥复制到里面（ key 文本框中），点击 add key 就ok了</li>
</ul>

<p><img src="https://lien-1258580758.cos.ap-shanghai.myqcloud.com/blog-img/07_moressh/git_ssh.png" alt="" /></p>

<h2 id="6分别测试两个密钥的ssh链接">6、分别测试两个密钥的ssh链接</h2>

<pre><code>ssh -T git@github.com
ssh -T git@photo.github.com
</code></pre>

<p>当你输入以上代码时，会有一段警告代码，如：</p>

<pre><code>The authenticity of host 'github.com (52.250.177.223)' can't be established.
RSA key fingerprint is SHA256:rxneWu2eUcd6M5DKFt2J9aeDZhxpNczajN89HRoqZZg.
Are you sure you want to continue connecting (yes/no)?
</code></pre>

<p>这是正常的，输入 yes 回车既可。如果你创建 SSH key 的时候设置了密码，接下来就会提示你输入密码，如：</p>

<pre><code>Enter passphrase for key '/c/Users/BLUE/.ssh/id_rsa':
</code></pre>

<p>密码正确后你会看到下边这句话，表示连接成功：</p>

<pre><code>Hi isArtJay! You've successfully authenticated, but GitHub does not provide shell access.
</code></pre>

<h2 id="7克隆新的项目">7、克隆新的项目</h2>

<p>首先我们先进入 GitHub，将克隆方式改为 Use SSH：</p>

<p><img src="https://lien-1258580758.cos.ap-shanghai.myqcloud.com/blog-img/07_moressh/clone.png" alt="" /></p>

<p>一般情况下，我们是通过如下的方式克隆一个项目：</p>

<pre><code>git clone git@github.com:your-account/your-prj.git
</code></pre>

<p>在我们有两个密钥的情况下（使用非默认密钥时），我们需要对这个语句中的域名部分做一下修改：</p>

<pre><code>git clone git@xxxx:your-account/your-prj.git
</code></pre>

<p><strong>注意：</strong>这里的 xxxx 是你更改本地的 SSH 配置时（步骤4，第9行代码）的 Host，比如我的：</p>

<pre><code>git clone git@photo.github.com:your-account/your-prj.git
</code></pre>

<p>如果你想克隆时指定目录名称：</p>

<pre><code>git clone git@photo.github.com:your-account/your-prj.git DirName
</code></pre>

<h2 id="8取消全局-用户名邮箱设置进入项目文件夹单独设置">8、取消全局 用户名/邮箱设置，进入项目文件夹单独设置</h2>

<pre><code># 取消全局 用户名/邮箱 配置
git config –global –unset user.name
git config –global –unset user.email

# 为每个仓库单独设置 用户名/邮箱
cd YourRepoPath
git config user.name "You Name"
git config user.email name@example.com
</code></pre>

<p>其实很简单，就是去掉 –global 参数就行了</p>
:ET